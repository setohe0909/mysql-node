import express from 'express';
import * as infoClientsCtrl from '../controllers/infoClient.controller';
import isAuthenticated from '../middlewares/authenticate';
import validate from '../config/joi.validate';
import schema from '../utils/validator';

const router = express.Router();

/**
 * @swagger
 * tags:
 *   - name: client
 *     description: Details data of each clients
 */

/**
 * @swagger
 * definitions:
 *   client:
 *     type: object
 *     properties:
 *       nit:
 *         type: integer
 *         description: Unique identifier representing a specific client
 *         example: 109090222
 *       full_name:
 *         type: string
 *         description: name completely of the client
 *         example: sebastian company
 *       address:
 *         type: string
 *         description: address of the client
 *         example: av 10 # 11 - 21
 *       phone:
 *         type: string
 *         description: phone of the client
 *         required: true
 *         example: +57 311 444 62 33
 *       city:
 *         type: string
 *         description: city of the client
 *         required: true
 *         example: Medellin
 *       state:
 *         type: string
 *         description: status of the client
 *         example: Antioquia
 *       country:
 *         type: string
 *         description: country of the client
 *         example: Colombia
 *       credit_limit:
 *         type: integer
 *         description: credit limit of the client
 *         example: 35564
 *       available_credit:
 *         type: integer
 *         description: avaialble credit of the client
 *         example: 105564
 *       visit_percentage:
 *         type: integer
 *         description: visit percentage of the client
 *         example: 30
 *       visits:
 *         type: integer
 *         description: visit of the client
 *         example: 30
 *       created_at:
 *         type: string
 *         format: date-time
 *         description: User creation datetime
 *       updated_at:
 *         type: string
 *         format: date-time
 *         description: User update datetime
 *   Error:
 *     type: object
 *     properties:
 *        message:
 *           type: string
 *        error:
 *           type: boolean
 *           default: true
 */

/**
 * @swagger
 * securityDefinitions:
 *   Bearer:
 *     description: |
 *            For accessing the API a valid JWT token must be passed in all the queries in
 *            the 'Authorization' header.
 *
 *
 *            A valid JWT token is generated by the API and returned as answer of a call
 *            to the route /auth/login giving a valid user & password.
 *
 *
 *            The following syntax must be used in the 'Authorization' header:
 *
 *            Bearer xxxxxx.yyyyyyy.zzzzzz
 *     type: apiKey
 *     name: Authorization
 *     in: header
 *
 */

router
  .route('/')

  /**
   * @swagger
   * /client:
   *   post:
   *     tags:
   *       - client
   *     summary: "Create a new client"
   *     security:
   *        - Bearer: []
   *     operationId: storeClient
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: body
   *         in: body
   *         description: Created client object
   *         required: true
   *         schema:
   *           $ref: "#/definitions/client"
   *     responses:
   *       200:
   *         description: OK
   *         schema:
   *           $ref: "#/definitions/client"
   *       403:
   *          description: Client not found
   *          schema:
   *             $ref: '#/definitions/Error'
   */

  .post(validate(schema.storeClient), (req, res) => {
    infoClientsCtrl.store(req, res);
  })

  /**
   * @swagger
   * /client:
   *   get:
   *     tags:
   *       - client
   *     summary: "List all client"
   *     operationId: findAll
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters: []
   *     responses:
   *       200:
   *         description: OK
   *         schema:
   *            type: object
   */

  .get((req, res) => {
    infoClientsCtrl.findAll(req, res);
  });

router
  .route('/:id')

  /**
   * @swagger
   * /client/{id}:
   *   get:
   *     tags:
   *       - client
   *     summary: Find the client by ID
   *     operationId: findById
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         in: path
   *         description: id of client that needs to be fetched
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: OK
   *         schema:
   *           $ref: "#/definitions/client"
   *       404:
   *          description: client not found
   *          schema:
   *             $ref: '#/definitions/Error'
   */

  .get((req, res) => {
    infoClientsCtrl.findById(req, res);
  })

  /**
   * @swagger
   * /client/{id}:
   *   put:
   *     tags:
   *       - client
   *     summary: "Update an existing client by ID"
   *     security:
   *       - Bearer: []
   *     operationId: update
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         in: path
   *         description: id that need to be updated
   *         required: true
   *         type: integer
   *       - name: body
   *         in: body
   *         description: Updated client object
   *         required: true
   *         schema:
   *           $ref: "#/definitions/client"
   *     responses:
   *       200:
   *         description: OK
   *         schema:
   *           $ref: "#/definitions/client"
   *       400:
   *         description: Invalid client
   */

  .put(isAuthenticated, (req, res) => {
    infoClientsCtrl.update(req, res);
  })

  /**
   * @swagger
   * /client/{id}:
   *   delete:
   *     tags:
   *       - client
   *     summary: Delete the client by ID
   *     security:
   *       - Bearer: []
   *     operationId: destroy
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         in: path
   *         description: id of client that needs to be deleted
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: OK
   *       400:
   *          description: "Invalid ID"
   */

  .delete(isAuthenticated, (req, res) => {
    infoClientsCtrl.destroy(req, res);
  });

export default router;
